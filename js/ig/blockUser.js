const blockUser=function(){};blockUser.block=function(t){"use strict";const{username:e,userId:s,csrfToken:n,updateStatusDiv:o,vueStatus:r,mode:a}=t;return new Promise((t,e)=>{i(s,n,t,e,a)});function i(t,s,n,a,u){const c=`https://www.instagram.com/web/friendships/${t}/${u}/`,p={headers:{"X-CSRFToken":s,"x-instagram-ajax":1,eferer:"https://www.instagram.com/"}};axios.post(c,"",p).then(t=>(function(t,s,n){o(`The request to ${n} ${e} was successful with response - ${t.status}`),s(t.status)})(t.data,n,u),c=>(function(n,a,u,c){console.log(n);const p=n.response?n.response.status:0;p>0&&console.log(`error response data - ${JSON.stringify(n.response.data)}/${p}`);if(console.log(`Error making http request to ${c} ${e}, status - ${p}`),instaDefOptions.httpErrorMap.hasOwnProperty(p)){console.log(`HTTP${p} error trying to ${c} the user.`,new Date);const e=instaMessages.getMessage(instaDefOptions.httpErrorMap[p],p,+instaDefOptions.retryInterval/6e4);return void function(e,n,a,u,c){o(e,"red"),instaTimeout.setTimeout(3e3).then(()=>instaCountdown.doCountdown("status",n,`${c.charAt(0).toUpperCase()+c.slice(1)}ing`,+(new Date).getTime()+instaDefOptions.retryInterval,r)).then(()=>{console.log("Continue execution after HTTP error",n,new Date),i(t,s,a,u,c)})}(e,p,a,u,c)}alert(instaMessages.getMessage("ERRBLOCKUSER",e,p)),u()})(c,n,a,u))}};