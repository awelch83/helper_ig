const __items=[],myDataTable={props:["csrfToken","updateStatusDiv","calcComments"],template:'<v-card>\n  <v-card-title>\n    <h3 class="headline mb-0"> Likes </h3>\n    <v-spacer></v-spacer>\n    <v-text-field\n      append-icon="search"\n      label="Search"\n      single-line\n      hide-details\n      v-model="search"\n    ></v-text-field>\n  </v-card-title>\n  <v-data-table\n      v-bind:headers="headers"\n      v-bind:items="items"\n      v-bind:search="search"\n      v-bind:pagination.sync="pagination"\n      v-bind:rows-per-page-items="[10,20,50,100,500,1000,{ text: \'All\', value: -1 }]"\n      item-key="username"\n    >\n    <template slot="headerCell" slot-scope="props">\n      <v-tooltip bottom>\n        <span slot="activator">\n          {{ props.header.text}}\n        </span>\n        <span>\n          {{ props.header.tooltip }}\n        </span>\n      </v-tooltip>\n    </template>\n    <template slot="items" slot-scope="props">\n      <tr @click="props.expanded = !props.expanded">\n      <td class="text-xs-center">{{ props.index + 1 }}</td>\n      <td class="text-xs-right">\n        <a v-bind:href="\'https://www.instagram.com/\'+[props.item.username][0]" target="_blank">\n          <img v-bind:src="[props.item.profile_pic_url][0]"></img>\n        </a>\n      </td>\n      <td class="text-xs-right">{{ props.item.username }}</td>\n      <td class="text-xs-right">{{ props.item.count }}</td>\n      <td class="text-xs-right">{{ props.item.firstLike }}</td>\n      <td class="text-xs-right">\n        <v-btn small v-if="props.item.count == 0 && props.item.followed_by_viewer"\n          v-on:click.stop="unfollowButtonClick(props.item)" color="primary">\n          Unfollow\n        </v-btn>\n        <span v-else>\n          {{ props.item.lastLike }}\n        </span>\n      </td>\n      <td class="hidden-sm-and-down hidden-sm-and-up">\n        {{ props.item.full_name }}\n      </td>\n      <td class="text-xs-right">{{ props.item.comments }}</td>\n      </tr>\n    </template>\n    <template slot="expand" slot-scope="props">\n      <v-card>\n        <v-card-title>\n          <h2 class="headline mb-0">\n            {{ props.item.full_name }}\n          </h2>\n        </v-card-title>\n      </v-card>\n    <div v-if="props.item.posts.length > 0" style="padding: 15px;">\n      <h3 class="headline mb-0">Liked posts - {{ props.item.count }} posts</h3>\n      <v-layout row wrap child-flex>\n        <v-flex v-for="post in props.item.posts" :key="post.id" xs12 sm3>\n            <v-card :href="post.url" target="_blank">\n              <v-card-media :src="post.pic" height="200px" contain>\n              </v-card-media>\n            </v-card>\n        </v-flex>\n      </v-layout>\n    </div>\n    <div v-if="props.item.commentedPosts.length > 0" style="padding: 15px;">\n      <h3 class="headline mb-0">Commented posts - {{ props.item.comments }} comments / {{ props.item.commentedPosts.length }} posts</h3>\n      <v-layout row wrap child-flex>\n        <v-flex v-for="post in props.item.commentedPosts" :key="post.id" xs12 sm3>\n            <v-card :href="post.url" target="_blank">\n              <v-card-media :src="post.pic" height="200px" contain>\n              </v-card-media>\n            </v-card>\n        </v-flex>\n      </v-layout>\n    </div>\n    </template>\n  </v-data-table>\n</v-card>',data:()=>({search:"",pagination:{sortBy:"count",rowsPerPage:50,descending:!0},headers:[{text:"#",value:"",sortable:!1,tooltip:"#"},{text:"Image",value:"",sortable:!1,tooltip:"Click the image to open the user profile on Instagram.com"},{text:"Username",value:"username",tooltip:"User name"},{text:"Likes",value:"count",tooltip:"The total amount of likes"},{text:"First",value:"firstLike",tooltip:"The date of first liked post"},{text:"Last",value:"lastLike",tooltip:"The date of last liked post"},{text:"Full Name",value:"full_name",class:"hidden-sm-and-down hidden-sm-and-up"},{text:"Comments",value:"comments",tooltip:"The total amount of comments"}],items:__items}),methods:{unfollowButtonClick(e){followUser.unFollow({username:e.username,userId:e.id,csrfToken:this.csrfToken,updateStatusDiv:this.updateStatusDiv,vueStatus:likes}).then(()=>{Vue.set(e,"followed_by_viewer",!1)})}},mounted(){this.calcComments||this.headers.pop()}};var likes=new Vue({el:"#app",created(){this.viewerUserId="",this.viewerUserName="",this.startDate=null},mounted:()=>{_gaq.push(["_trackPageview"]),chrome.runtime.onMessage.addListener(e=>{"openLikesPage"===e.action&&(likes.delay=e.likeDelay,likes.viewerUserName=e.viewerUserName,likes.viewerUserId=e.viewerUserId,likes.pageSize=e.pageSizeForFeed,likes.userToGetLikes=e.userName===instaDefOptions.you?e.viewerUserName:e.userName,likes.fetchDelay=e.delay,likes.csrfToken=e.csrfToken,likes.fetchPageSize=e.pageSize)})},data:{rules:{required:e=>!!e||"Required."},isGettingLikesInProgress:!1,isAddingFollowersInProgress:!1,followersAdded:!1,delay:0,rndDelay:0,fetchedPosts:0,processedPosts:0,totalPosts:0,stop:!1,status:"",statusColor:"",log:"",userToGetLikes:"",processedLikes:0,processedComments:0,postEntity:"zzz",postProcessedEntity:0,postTotalEntity:0,commentedPosts:[],mostLikedPost:{},lessLikedPost:{},progressValue:0,calcComments:!0,init:!0,outType:"csv",itemsLength:0,numberToCalc:0},computed:{isCompleted(){return this.stop?(this.updateStatusDiv(`${(new Date).toLocaleString()}/The process will be stopped now because you clicked the Stop button`),!0):this.numberToCalc>0&&this.numberToCalc<=this.processedPosts&&(this.updateStatusDiv(`${(new Date).toLocaleString()}/The process will be stopped now because all posts to analyzed are processed - ${this.processedPosts}`),!0)},startButtonDisabled(){return this.isGettingLikesInProgress||""===this.userToGetLikes},addFollowersButtonDisabled(){return this.isRunning||0===__items.length||this.followersAdded},exportButtonDisabled(){return this.isGettingLikesInProgress||0===__items.length},isRunning(){return this.isGettingLikesInProgress||this.isAddingFollowersInProgress},binding(){const e={};return this.$vuetify.breakpoint.mdAndUp&&(e.column=!0),e}},methods:{calcDelay(){const e=+Math.floor(Math.random()*this.delay*this.rndDelay/100)+ +this.delay;return this.updateStatusDiv(`Calculated delay ${e}ms`),e},checkNumberToCalc(){(!this.numberToCalc||this.numberToCalc<0)&&this.$nextTick(()=>{this.numberToCalc=0})},checkDelay(){(!this.delay||this.delay<100)&&this.$nextTick(()=>{this.delay=100})},checkRndDelay(){(!this.rndDelay||this.rndDelay<0)&&this.$nextTick(()=>{this.rndDelay=0})},updateStatusDiv(e,t){this.log+=`${e}\n`,this.status=e,this.statusColor=t||"black",setTimeout(()=>{const e=document.getElementById("log_text_area");e&&(e.scrollTop=e.scrollHeight)},0)},timeout:e=>new Promise(t=>setTimeout(t,e)),async getPosts(e,t){const s=await e.getPosts(t);likes.fetchedPosts+=s.length,likes.totalPosts=e.getTotal(),await this.getPostLikesAndComments(e,s,0)},formatDate(e){const t=e.getDate(),s=e.getMonth()+1;return`${e.getFullYear()}-${s<=9?`0${s}`:s}-${t<=9?`0${t}`:t}`},whenCompleted(){console.log("when completed entered....."),likes.commentedPosts.length>1&&likes.commentedPosts.sort((e,t)=>e.comments<t.comments?1:e.comments>t.comments?-1:0),likes.updateStatusDiv(`Processed ${likes.processedPosts} posts/${likes.processedLikes} likes/${likes.processedComments} comments`),likes.isGettingLikesInProgress=!1,__items.length=0,Array.from(this.data.values()).forEach(e=>{e.lastLike&&(e.diff=Math.round((e.lastLike-e.firstLike)/60/60/24),e.lastLike=this.formatDate(new Date(1e3*e.lastLike)),e.firstLike=this.formatDate(new Date(1e3*e.firstLike))),__items.push(e)})},async getPostLikesAndComments(e,t,s){if(t.length>s){if(this.isCompleted)return;const i=t[s],o=i.node.display_url,a=new Date(1e3*i.node.taken_at_timestamp).toLocaleString(),n=i.node.shortcode;if(likes.postTotalEntity=i.node.edge_media_preview_like.count,likes.postProcessedEntity=0,likes.postEntity="Likes",likes.updateStatusDiv(`Post ${o} taken on ${a} has ${likes.postTotalEntity} ${likes.postEntity.toLowerCase()}`),likes.postTotalEntity>(likes.mostLikedPost.likes||0)&&(likes.mostLikedPost={id:n,likes:likes.postTotalEntity,pic:o,url:`https://www.instagram.com/p/${n}`}),likes.postTotalEntity<(likes.lessLikedPost.likes||999999)&&(likes.lessLikedPost={id:n,likes:likes.postTotalEntity,pic:o,url:`https://www.instagram.com/p/${n}`}),await this.getPostLikes(new GetLikes({shortCode:n,end_cursor:"",updateStatusDiv:likes.updateStatusDiv,pageSize:instaDefOptions.defPageSizeForLikes,vueStatus:likes,url:o}),e,t,s,i.node.taken_at_timestamp),this.calcComments&&i.node.edge_media_to_comment.count>0){likes.postEntity="Comments",likes.postProcessedEntity=0,likes.postTotalEntity=i.node.edge_media_to_comment.count;const a=await this.getPostComments(new GetComments({shortCode:n,end_cursor:"",updateStatusDiv:likes.updateStatusDiv,pageSize:instaDefOptions.defPageSizeForLikes,vueStatus:likes,url:o}),e,t,s,i.node.taken_at_timestamp);a>0&&likes.commentedPosts.push({id:n,pic:o,url:`https://www.instagram.com/p/${n}`,comments:Number(a)})}if(likes.processedPosts+=1,this.isCompleted)return;likes.progressValue=likes.processedPosts/likes.totalPosts*100,await this.timeout(likes.calcDelay()),await this.getPostLikesAndComments(e,t,++s)}else e.hasMore()&&(likes.updateStatusDiv(`The more posts will be fetched now...${new Date}`),await this.timeout(likes.calcDelay()),await this.getPosts(e,!1))},async getPostComments(e,t,s,i,o){if(this.isCompleted)return;const a=await e.get();likes.updateStatusDiv(`... fetched information about ${a.data.length} comments`);for(let e=0;e<a.data.length;e+=1){const{id:t,username:s,profile_pic_url:i}=a.data[e].node.owner;if(this.data.has(t)){const e=this.data.get(t);e.comments=e.comments+1||1,e.commentedPosts.some(e=>e.id===a.shortCode)||e.commentedPosts.push({id:a.shortCode,pic:a.url,url:`https://www.instagram.com/p/${a.shortCode}`}),this.data.set(t,e)}else this.data.set(t,{id:t,username:s,count:0,comments:1,profile_pic_url:i,posts:[],commentedPosts:[{id:a.shortCode,pic:a.url,url:`https://www.instagram.com/p/${a.shortCode}`}]}),this.itemsLength=this.data.size;likes.postProcessedEntity+=1,likes.processedComments+=1}return e.hasMore()?(await this.timeout(likes.calcDelay()),this.getPostComments(e,t,s,i,o)):likes.postProcessedEntity},async getPostLikes(e,t,s,i,o){if(this.isCompleted)return;const a=await e.get();likes.updateStatusDiv(`... fetched information about ${a.data.length} likes`);for(let e=0;e<a.data.length;e+=1){const{id:t,username:s,full_name:i,profile_pic_url:n}=a.data[e].node;if(this.data.has(t)){const s=this.data.get(t);s.count+=1,s.lastLike=s.lastLike||o,s.firstLike=s.firstLike||o,o>s.lastLike?s.lastLike=o:o<s.firstLike&&(s.firstLike=o),s.full_name=i,s.followed_by_viewer=a.data[e].node.followed_by_viewer,s.requested_by_viewer=a.data[e].node.requested_by_viewer,s.is_verified=a.data[e].node.is_verified,s.posts.push({id:a.shortCode,pic:a.url,url:`https://www.instagram.com/p/${a.shortCode}`}),this.data.set(t,s)}else this.data.set(t,{id:t,username:s,count:1,lastLike:o,firstLike:o,full_name:i,profile_pic_url:n,followed_by_viewer:a.data[e].node.followed_by_viewer,requested_by_viewer:a.data[e].node.requested_by_viewer,is_verified:a.data[e].node.is_verified,posts:[{id:a.shortCode,pic:a.url,url:`https://www.instagram.com/p/${a.shortCode}`}],commentedPosts:[]}),this.itemsLength=this.data.size;likes.postProcessedEntity+=1,likes.processedLikes+=1}e.hasMore()&&(await this.timeout(likes.calcDelay()),await this.getPostLikes(e,t,s,i,o))},exportToExcel(){const e=`getLikes_${this.userToGetLikes}_${exportUtils.formatDate(new Date)}.${this.outType}`;if("xlsx"===this.outType){const t=XLSX.utils.book_new();t.Props={Title:"Get Likes Title",Subject:"Get Likes Subject",Author:"Instagram Helper",CreatedDate:new Date},t.SheetNames.push("GetLikesSheet");const s=XLSX.utils.json_to_sheet(__items,{cellDates:!0});t.Sheets.GetLikesSheet=s;const i=XLSX.write(t,{bookType:this.outType,type:"binary"});saveAs(new Blob([exportUtils.s2ab(i)],{type:"application/octet-stream"}),e)}else{const t=XLSX.utils.book_new(),s=XLSX.utils.json_to_sheet(__items);XLSX.utils.book_append_sheet(t,s,"output"),XLSX.writeFile(t,e)}},async addFollowers(){likes.userInfo||(likes.userInfo=await instaUserInfo.getUserProfile({username:likes.viewerUserName}));const e={request:null,userName:likes.userInfo.username,pageSize:likes.fetchPageSize,delay:likes.delay,csrfToken:likes.csrfToken,userId:likes.userInfo.id,relType:"followed_by",callBoth:!1,checkDuplicates:!0,limit:0,followed_by_count:likes.userInfo.followed_by_count,followed_by_processed:0,startTime:new Date,receivedResponses:0,processedUsers:0,followProcessedUsers:0,viewerUserId:likes.viewerUserId};likes.isAddingFollowersInProgress=!0,likes.promiseFetchInstaUsers(e).then(e=>{let t=0;for(const e in __items)t+=!__items[e].count,Vue.set(__items[e],"count",__items[e].count||0),Vue.set(__items[e],"diff",__items[e].diff||0),Vue.set(__items[e],"posts",__items[e].posts||[]),Vue.set(__items[e],"commentedPosts",__items[e].commentedPosts||[]),delete __items[e].user_profile,delete __items[e].user_follows;this.updateStatusDiv(`Potential candidates to be unfollowed - ${t}`),likes.isAddingFollowersInProgress=!1,this.followersAdded=!0})},promiseFetchInstaUsers:e=>new Promise(t=>{new FetchUsers(Object.assign({},{obj:e,myData:__items,htmlElements:{},updateStatusDiv:likes.updateStatusDiv,resolve:t,funcUpdateProgressBar(t){likes.progressValue=t/e.followed_by_count*100},vueStatus:likes})).fetchInstaUsers()}),startButtonClick(){let e=new GetPosts({pageSize:likes.pageSize,mode:"likeProfile",updateStatusDiv:likes.updateStatusDiv,end_cursor:null,vueStatus:likes,userName:likes.userToGetLikes,userId:likes.viewerUserName===likes.userToGetLikes?likes.viewerUserId:""});e.resolveUserName().then(async t=>{likes.init=!1,likes.followersAdded=!1,likes.isGettingLikesInProgress=!0,likes.userInfo=t,likes.data=new Map,likes.startDate=(new Date).toLocaleTimeString(),likes.fetchedPosts=0,likes.processedPosts=0,likes.totalPosts=0,likes.stop=!1,likes.log="",likes.processedLikes=0,likes.processedComments=0,likes.commentedPosts=[],likes.lessLikedPost={},likes.mostLikedPost={},likes.updateStatusDiv(`The interval between the requests is ${likes.delay}ms`),await this.getPosts(e,!0),this.whenCompleted()},()=>{alert("Specified user was not found"),e=null})}},components:{"my-data-table":myDataTable}});