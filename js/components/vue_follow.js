const follow=new Vue({el:"#app",created(){this.viewerUserId="",this.viewerUserName="",this.startDate=null},mounted:()=>{_gaq.push(["_trackPageview"]),chrome.runtime.onMessage.addListener(e=>{"openMassFollowPage"===e.action&&(follow.delay=e.followDelay,follow.csrfToken=e.csrfToken,follow.viewerUserName=e.viewerUserName,follow.viewerUserId=e.viewerUserId,follow.pageSize=e.pageSizeForFeed)})},data:{p2:!1,isInProgress:!1,delay:0,rndDelay:30,stop:!1,status:"",statusColor:"",log:"",followedUsers:0,requestedUsers:0,unFollowedUsers:0,processUsersLength:0,hoursPerPeriod:1,actionsPerPeriod:50,donePerPeriod:0,periodStarted:null},computed:{endOfCurrentPeriod(){return this.periodStarted?this.periodStarted+60*this.hoursPerPeriod*60*1e3:""},stillInQueue(){return this.processUsersLength-this.requestedUsers-this.followedUsers-this.unFollowedUsers},startButtonDisabled(){return this.isInProgress},isPaused(){return!!this.p2&&(this.actionsPerPeriod<=this.donePerPeriod?(this.updateStatusDiv(`${(new Date).toLocaleString()}/The process will be paused because the actions limit per period is reached: ${this.actionsPerPeriod}/${this.donePerPeriod}`),this.donePerPeriod=0,!0):(Date.now()-this.periodStarted>60*this.hoursPerPeriod*60*1e3&&(this.updateStatusDiv(`${(new Date).toLocaleString()}/WE ARE GOING TO START A NEW PERIOD EVEN IF AMOUNT OF LIKES IS NOT REACHED: ${this.actionsPerPeriod}/${this.donePerPeriod}`),this.periodStarted=Date.now(),this.donePerPeriod=0),!1))}},methods:{calcDelay(e){if(e){this.updateStatusDiv(`${(new Date).toLocaleString()}: Calculating the time to start a new period.`);const e=this.endOfCurrentPeriod-Date.now();return this.updateStatusDiv(`${(new Date).toLocaleString()}: End of this period should be on\n          ${new Date(this.endOfCurrentPeriod).toLocaleString()}/${e}, so we start a new period on that time.`),e}{const e=+Math.floor(Math.random()*this.delay*this.rndDelay/100)+ +this.delay;return this.updateStatusDiv(`Calculated delay ${e}ms`),e}},checkDurationPeriod(){(!this.hoursPerPeriod||this.hoursPerPeriod<1)&&this.$nextTick(()=>this.hoursPerPeriod=1),this.hoursPerPeriod>24&&this.$nextTick(()=>this.hoursPerPeriod=24)},checkActionsPerPeriod(){(!this.actionsPerPeriod||this.actionsPerPeriod<1)&&this.$nextTick(()=>this.actionsPerPeriod=1),this.actionsPerPeriod>1e3&&this.$nextTick(()=>this.actionsPerPeriod=1e3)},checkDelay(){(!this.delay||this.delay<1e4)&&this.$nextTick(()=>this.delay=1e4)},checkRndDelay(){(!this.rndDelay||this.rndDelay<0)&&this.$nextTick(()=>this.rndDelay=0)},timeout:e=>new Promise(o=>setTimeout(o,e)),updateStatusDiv(e,o){this.log+=`${e}\n`,this.status=e,this.statusColor=o||"black",setTimeout(()=>{const e=document.getElementById("log_text_area");e.scrollTop=e.scrollHeight},0)},prepareInput(){const{value:e}=document.getElementById("ids"),o=e.replace(/[\n\r]/g,",").split(",").map(e=>e.trim()).filter(e=>""!==e);return this.processUsersLength=o.length,o},async unFollowButtonClick(){follow.isInProgress=!0,follow.processUsers=this.prepareInput(),follow.unFollowedUsers=0,follow.errorsResolvingUserId=0,this.periodStarted=Date.now(),this.donePerPeriod=0;for(let e=0;e<follow.processUsers.length;e+=1){follow.updateStatusDiv(`Mass unfollowing users: ${follow.processUsers[e]}/${e+1} of ${follow.processUsers.length}`);const o=await this.getUserId(follow.processUsers[e]);if(""===o){console.log("userId is empty, continue to next iteration");continue}const s=await followUser.unFollow({username:follow.processUsers[e],userId:o,csrfToken:follow.csrfToken,updateStatusDiv:follow.updateStatusDiv,vueStatus:follow});"ok"===s?follow.unFollowedUsers+=1:console.log(`Not recognized result - ${s}`),this.donePerPeriod+=1,e<follow.processUsers.length-1&&(this.isPaused?(await this.timeout(follow.calcDelay(!0)),this.periodStarted=Date.now(),follow.updateStatusDiv(`${(new Date).toLocaleString()} Starting a new period`)):await this.timeout(follow.calcDelay()))}follow.isInProgress=!1,follow.updateStatusDiv(`Completed!\n          UnFollowed: ${follow.unFollowedUsers}\n          Errors resolving username: ${this.errorsResolvingUserId}`)},async followButtonClick(){follow.isInProgress=!0,follow.processUsers=this.prepareInput(),follow.followedUsers=0,follow.requestedUsers=0,follow.errorsResolvingUserId=0,this.periodStarted=Date.now(),this.donePerPeriod=0;for(let e=0;e<follow.processUsers.length;e+=1){follow.updateStatusDiv(`Mass following users: ${follow.processUsers[e]}/${e+1} of ${follow.processUsers.length}`);const o=await this.getUserId(follow.processUsers[e]);if(""===o){console.log("userId is empty, continue to next iteration");continue}const s=await followUser.follow({username:follow.processUsers[e],userId:o,csrfToken:follow.csrfToken,updateStatusDiv:follow.updateStatusDiv,vueStatus:follow});"following"===s?follow.followedUsers+=1:"requested"===s?follow.requestedUsers+=1:console.log(`Not recognized result - ${s}`),this.donePerPeriod+=1,e<follow.processUsers.length-1&&(this.isPaused?(await this.timeout(follow.calcDelay(!0)),this.periodStarted=Date.now(),follow.updateStatusDiv(`${(new Date).toLocaleString()} Starting a new period`)):await this.timeout(follow.calcDelay()))}follow.isInProgress=!1,follow.updateStatusDiv(`Completed!\n          Followed: ${follow.followedUsers}\n          Requested: ${follow.requestedUsers}\n          Errors resolving username: ${this.errorsResolvingUserId}`)},async getUserId(e){let o="";if(/^\d+$/.test(e))o=e;else{let s;this.updateStatusDiv(`${e} does not look as user id, maybe username, try to convert username to userid`),console.log("resolving username to userid",e);try{s=await instaUserInfo.getUserProfile({username:e,updateStatusDiv:this.updateStatusDiv,silent:!0,vueStatus:this})}catch(s){return this.updateStatusDiv(`${e} error 404 resolving the username`),console.log("error resolving username to userid",e),this.errorsResolvingUserId+=1,o}console.log(s),o=s.id,this.updateStatusDiv(`username resolved to ${o}`),console.log("resolved username to userid",o)}return o}}});